.nh
.TH gw\-aws\-audit 8

.SH NAME
.PP
gw\-aws\-audit \- a collection of tools to audit AWS.


.SH SYNOPSIS
.PP
gw\-aws\-audit


.SH COMMAND TREE
.RS
.IP \(bu 2
s3
\[la]#s3\[ra]
.RS
.IP \(bu 2
add\-cost\-tag
\[la]#add-cost-tag\[ra]
.IP \(bu 2
metrics
\[la]#metrics\[ra]
.IP \(bu 2
clear\-bucket, exterminatus
\[la]#clear-bucket-exterminatus\[ra]

.RE

.IP \(bu 2
rds
\[la]#rds\[ra]
.RS
.IP \(bu 2
enhanced\-monitoring
\[la]#enhanced-monitoring\[ra]
.IP \(bu 2
public
\[la]#public\[ra]

.RE

.IP \(bu 2
ec2
\[la]#ec2\[ra]
.RS
.IP \(bu 2
enhanced\-monitoring
\[la]#enhanced-monitoring\[ra]
.IP \(bu 2
detached\-volumes
\[la]#detached-volumes\[ra]
.IP \(bu 2
stopped\-hosts
\[la]#stopped-hosts\[ra]
.IP \(bu 2
pem\-keys
\[la]#pem-keys\[ra]

.RE

.IP \(bu 2
sg
\[la]#sg\[ra]
.RS
.IP \(bu 2
detached
\[la]#detached\[ra]
.IP \(bu 2
attached
\[la]#attached\[ra]
.IP \(bu 2
cidr
\[la]#cidr\[ra]
.IP \(bu 2
port
\[la]#port\[ra]
.IP \(bu 2
amazon
\[la]#amazon\[ra]
.IP \(bu 2
direct\-ip\-mapping, dim
\[la]#direct-ip-mapping-dim\[ra]

.RE

.IP \(bu 2
iam
\[la]#iam\[ra]
.RS
.IP \(bu 2
user\-report, ur
\[la]#user-report-ur\[ra]

.RE

.IP \(bu 2
cw
\[la]#cw\[ra]
.RS
.IP \(bu 2
enhanced\-monitoring
\[la]#enhanced-monitoring\[ra]

.RE

.IP \(bu 2
install\-manpage
\[la]#install-manpage\[ra]
.IP \(bu 2
version, v
\[la]#version-v\[ra]

.RE

.PP
\fBUsage\fP:

.PP
.RS

.nf
gw\-aws\-audit [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]

.fi
.RE


.SH COMMANDS
.SH s3
.PP
S3 related commands

.SS add\-cost\-tag
.PP
Add s3\-cost\-name to all S3 buckets

.PP
.RS

.nf
Idempotent action that will add the `s3\-cost\-name` tag to ALL S3 buckets for a
given account.

The value will be the Bucket name.

.fi
.RE

.SS metrics
.PP
Get usage metrics

.PP
.RS

.nf
Prints out a CSV report to STDOUT to help track usage across all buckets for a
given account.

Metrics per Bucket:

Objects (count)
Size (Bytes)
Size (GB)
Size (TB)
Bytes per Object
MB per Object
Has Cost Tag

.fi
.RE

.SS clear\-bucket, exterminatus
.PP
Clear all Objects within a given Bucket

.PP
.RS

.nf
Efficiently delete all objects within a bucket.

This process will run multiple paged deletes in parallel. It will handle API
throttling from AWS with an exponential backoff with retry. 

.fi
.RE

.PP
\fB\-\-bucket, \-b\fP="": Bucket to clear

.SH rds
.PP
RDS related commands

.SS enhanced\-monitoring
.PP
Produce report of Enhanced Monitoring enabled instances

.SS public
.PP
Produce report of instances that have public interfaces attached

.PP
.RS

.nf
Produces a report that displays a list RDS servers that are configured as Publicly Accessible.

The report contains:

DB INSTANCE:
    \- Name of the instance

ENGINE:
    \- RDS DB engine

SECURITY GROUPS:
    \- Security Group ID
    \- Security Group Name
    \- Inbound Port
    \- CIDR rules applied to the Port

.fi
.RE

.SH ec2
.PP
EC2 related commands

.SS enhanced\-monitoring
.PP
Produce report of Enhanced Monitoring enabled instances

.SS detached\-volumes
.PP
List detached EBS volumes and snapshot counts

.SS stopped\-hosts
.PP
List stopped EC2 hosts and associated EBS volumes

.SS pem\-keys
.PP
List instances and PEM key used at time of creation

.SH sg
.PP
Security Group related commands

.SS detached
.PP
generate a report of all Security Groups that are NOT attached to an instance

.PP
.RS

.nf
This command will scan the EC2 NetworkInterfaces to determine what
Security Groups are NOT attached/assigned in AWS.


.fi
.RE

.SS attached
.PP
generate a report of all Security Groups that are attached to an instance

.PP
.RS

.nf
This command will scan the EC2 NetworkInterfaces to determine what
Security Groups are attached/assigned in AWS.

.fi
.RE

.SS cidr
.PP
generate a report comparing SG rules with input CIDR blocks

.PP
.RS

.nf
$ gw\-aws\-audit sg cidr \-\-allowed 10.176.0.0/16,10.175.0.0/16 \-\-alert 174.0.0.0/8,1.2.3.4/32

This command will generate a report detecting the port to CIDR mapping rules 
for attached Security Groups. 

A list of Approved CIDRs is required. This is typically the CIDR block associated
with your VPC.

.fi
.RE

.PP
\fB\-\-alert, \-b\fP="": CIDR blocks that will cause an alert (csv) (default: 174.0.0.0/8)

.PP
\fB\-\-all\fP: Process ALL Security Groups, not just attached

.PP
\fB\-\-approved, \-a\fP="": CIDR blocks that are approved (csv)

.PP
\fB\-\-ignore\-ports, \-p\fP="": Ports that can be ignored (csv) (default: 80,443,3,4,3\-4)

.PP
\fB\-\-ignore\-protocols\fP="": Protocols to ignore. Can be tcp,udp,icmp (csv)

.PP
\fB\-\-warn, \-w\fP="": CIDR blocks that will cause a warning (csv) (default: 204.0.0.0/8)

.SS port
.PP
generate a report comparing SG rules with input CIDR blocks on a specific port

.PP
.RS

.nf
$ gw\-aws\-audit sg ports \-\-ports 22,3306 \-\-allowed 10.176.0.0/16,10.175.0.0/16 \-\-alert 174.0.0.0/8,1.2.3.4/32

This command will generate a report for a set of PORTS for attached Security Groups.

A list of Approved CIDRs is required. This is typically the CIDR block associated
with your VPC.

.fi
.RE

.PP
\fB\-\-alert, \-b\fP="": CIDR blocks that will cause an alert (csv) (default: 174.0.0.0/8)

.PP
\fB\-\-all\fP: Process ALL Security Groups, not just attached

.PP
\fB\-\-approved, \-a\fP="": CIDR blocks that are approved (csv)

.PP
\fB\-\-ignore\-protocols\fP="": Protocols to ignore. Can be tcp,udp,icmp (csv)

.PP
\fB\-\-ports, \-p\fP="": Ports to generate report on (csv) (default: 22)

.PP
\fB\-\-warn, \-w\fP="": CIDR blocks that will cause a warning (csv) (default: 204.0.0.0/8)

.SS amazon
.PP
generate a report of allow SG with rules mapped to known AWS IPs

.PP
.RS

.nf
This method loads the current version of https://ip\-ranges.amazonaws.com/ip\-ranges.json
and compares the CIDR blocks against all Security Groups.

.fi
.RE

.SS direct\-ip\-mapping, dim
.PP
generate report of Security Groups with direct mappings to EC2 instances

.PP
.RS

.nf
This method will generate a report comparing all Security Groups with all 
EC2 instances to determine where you have a direct IP mapping.

This will note Internal and External IP usage as well.

.fi
.RE

.SH iam
.SS user\-report, ur
.PP
generates report of IAM Users and Access Key Usage

.PP
.RS

.nf
This action will generate a report for all Users within an AWS account with the details
specific user authentication methods.

┌──────────────┬────────┬───────────┬─────────┬────────────┬─────────────────────────────────────────────────────────────────────────┐
│              │        │           │         │            │                           ACCESS KEY DETAILS                            │
│ USER         │ STATUS │       AGE │ CONSOLE │ LAST LOGIN │               KEY ID | STATUS | AGE | LAST USED | SERVICE               │
├──────────────┼────────┼───────────┼─────────┼────────────┼─────────────────────────────────────────────────────────────────────────┤
│ user12345    │   PASS │  123 days │      NO │       NONE │                               0 API Keys                                │
├──────────────┼────────┼───────────┼─────────┼────────────┼─────────────────────────────────────────────────────────────────────────┤
│ bot\-user\-123 │   WARN │  236 days │      NO │       NONE │                               2 API Keys                                │
│              │        │           │         │            │ AKIAIOSFODNN6EXAMPLE │ Active │ 229 days │   229 days 22 hours   │ s3   │
│              │        │           │         │            │ AKIAIOSFODNN5EXAMPLE │ Active │ 228 days │ 51 minutes 24 seconds │ sts  │
├──────────────┼────────┼───────────┼─────────┼────────────┼─────────────────────────────────────────────────────────────────────────┤
│ userAOK123   │   FAIL │   43 days │     YES │     5 days │                               1 API Key                                 │
│              │        │           │         │            │   AKIAIOSFODNN3EXAMPLE │ Active │ 43 days │ 22 hours 5 minutes │ ec2    │
└──────────────┴────────┴───────────┴─────────┴────────────┴─────────────────────────────────────────────────────────────────────────┘

USER [string]:
  \- The user name

STATUS [enum]:
  \- PASS: When a does NOT have Console Access and has NO Access Keys or only INACTIVE Access Keys
  \- FAIL: When a User has Console Access
  \- WARN: When a User does NOT have Console Access, but does have at least 1 ACTIVE Access Key
  \- UNKNOWN: Catch all for cases not handled.

AGE [duration]:
  \- Time since User was created

CONSOLE [bool]:
  \- Does the User have Console Access? YES/NO

LAST LOGIN [duration]:
  \- Time since User was created
  \- NONE if the User does not have Console Access or if the User has NEVER logged in.

ACCESS KEY DETAILS [sub table]:
  \- Primary header row is the number of Access Keys associated with the User

  KEY ID [string]:
    \- The AWS\_ACCESS\_KEY\_ID

  STATUS [enum]:
    \- Active/Inactive

  LAST USED [duration]:
    \- Time since the Access Key was last used.

  SERVICE [string]:
    \- The last AWS Service that the Access Key was used to access at the "LAST USED" time.

.fi
.RE

.PP
\fB\-\-show\-only\fP="": filter results to show only pass, warn or fail

.SH cw
.PP
CloudWatch related commands

.SS enhanced\-monitoring
.PP
Produce report of Enhanced Monitoring enabled EC2 \& RDS instances

.SH install\-manpage
.PP
Generate and install man page

.PP
.RS

.PP
NOTE: Windows is not supported

.RE

.SH version, v
.PP
Print version info

